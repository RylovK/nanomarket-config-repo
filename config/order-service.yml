server:
  port: 8083

spring:

  kafka:
    bootstrap-servers: kafka-1:9092,kafka-2:9094,kafka-3:9096
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      delivery-timeout-ms: 10000
      linger-ms: 0
      request-timeout-ms: 5000
      enable-idempotence: true
      add-type-info-headers: false
#      transaction-id-prefix: order-service-transaction-${random.value}-

    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      group-id: order-service-group
      auto-offset-reset: earliest

    topic:
      orderCreated: order-created-events-topic
      orderCancelled: order-cancelled-events-topic
      productReserved: product-reserved-events-topic
      productOutOfStock: product-out-of-stock-events-topic


  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://postgres:5432/nanomarket_db
    username: root
    password: root
  data:
    jdbc:
      dialect: postgresql
  jpa:
    properties:
      hibernate:
        show_sql: true
    hibernate:
      ddl-auto: validate

eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://eureka:8070/eureka

management:
  endpoint:
    env:
      post:
        enabled: true

resilience4j:
  circuitbreaker:
    configs:
      default:
        registerHealthIndicator: true
        slidingWindowType: COUNT_BASED
        slidingWindowSize: 100
        permittedNumberOfCallsInHalfOpenState: 10
        waitDurationInOpenState: 10s
        failureRateThreshold: 50
      instances:
        checkStockAndReserveProducts:
          baseConfig: default
          failureRateThreshold: 30
          recordExceptions:
            - org.springframework.web.client.HttpServerErrorException
            - java.io.IOException
            - java.util.concurrent.TimeoutException
            - org.springframework.web.client.ResourceAccessException
        getProductAvailability:
          baseConfig: default
          slidingWindowSize: 25
        reserveProducts:
          baseConfig: default
          slidingWindowSize: 25

  bulkhead:
    configs:
      default:
        type: ThreadPool
        maxWaitDuration: 500ms
        maxConcurrentCalls: 25
        queueCapacity: 100
        keepAliveDuration: 20ms
    instances:
      checkStockAndReserveProducts:
        baseConfig: default
        maxConcurrentCalls: 15
      getProductAvailability:
        baseConfig: default
        maxWaitDuration: 250ms
        maxConcurrentCalls: 10
      reserveProducts:
        baseConfig: default
        maxWaitDuration: 250ms
        maxConcurrentCalls: 10


  retry:
    configs:
      default:
        maxRetryAttempts: 5
        waitDuration: 5s
        retryExceptions:
          - java.util.concurrent.TimeoutException
          - java.net.SocketTimeoutException



#
#resilience4j.ratelimiter:
#instances:
#  licenseService:
#  timeoutDuration: 1000ms
#  limitRefreshPeriod: 5000
#  limitForPeriod: 5